
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.53 (git sha1 53c22ab7c, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)

1. Executing Liberty frontend: /foss/pdks/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.
[INFO] Using SDC file '/foss/designs/ALU/runs/RUN_2025-06-08_17-25-06/06-yosys-synthesis/synthesis.abc.sdc' for ABCâ€¦

2. Executing Verilog-2005 frontend: /foss/designs/ALU/ALU_7bit.v
Parsing SystemVerilog input from `/foss/designs/ALU/ALU_7bit.v' to AST representation.
Storing AST representation for module `$abstract\ALU_7bit'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /foss/designs/ALU/ALU_SHR_7bit.v
Parsing SystemVerilog input from `/foss/designs/ALU/ALU_SHR_7bit.v' to AST representation.
Storing AST representation for module `$abstract\ALU_SHR_7bit'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /foss/designs/ALU/ALU_NOT_7bit.v
Parsing SystemVerilog input from `/foss/designs/ALU/ALU_NOT_7bit.v' to AST representation.
Storing AST representation for module `$abstract\ALU_NOT_7bit'.
Successfully finished Verilog frontend.

5. Executing HIERARCHY pass (managing design hierarchy).

6. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU_7bit'.
Generating RTLIL representation for module `\ALU_7bit'.

6.1. Analyzing design hierarchy..
Top module:  \ALU_7bit

6.2. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU_SHR_7bit'.
Generating RTLIL representation for module `\ALU_SHR_7bit'.

6.3. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU_NOT_7bit'.
Generating RTLIL representation for module `\ALU_NOT_7bit'.

6.4. Analyzing design hierarchy..
Top module:  \ALU_7bit
Used module:     \ALU_SHR_7bit
Used module:     \ALU_NOT_7bit

6.5. Analyzing design hierarchy..
Top module:  \ALU_7bit
Used module:     \ALU_SHR_7bit
Used module:     \ALU_NOT_7bit
Removing unused module `$abstract\ALU_NOT_7bit'.
Removing unused module `$abstract\ALU_SHR_7bit'.
Removing unused module `$abstract\ALU_7bit'.
Removed 3 unused modules.
Renaming module ALU_7bit to ALU_7bit.

7. Generating Graphviz representation of design.
Writing dot description to `/foss/designs/ALU/runs/RUN_2025-06-08_17-25-06/06-yosys-synthesis/hierarchy.dot'.
Dumping module ALU_7bit to page 1.

8. Executing TRIBUF pass.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \ALU_7bit
Used module:     \ALU_SHR_7bit
Used module:     \ALU_NOT_7bit

9.2. Analyzing design hierarchy..
Top module:  \ALU_7bit
Used module:     \ALU_SHR_7bit
Used module:     \ALU_NOT_7bit
Removed 0 unused modules.

10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

11. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/foss/designs/ALU/ALU_7bit.v:13$1 in module ALU_7bit.
Marked 1 switch rules as full_case in process $proc$/foss/designs/ALU/ALU_7bit.v:13$1 in module ALU_7bit.
Removed 1 dead cases from process $proc$/foss/designs/ALU/ALU_SHR_7bit.v:6$3 in module ALU_SHR_7bit.
Marked 1 switch rules as full_case in process $proc$/foss/designs/ALU/ALU_SHR_7bit.v:6$3 in module ALU_SHR_7bit.
Removed a total of 2 dead cases.

12. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 2 assignments to connections.

13. Executing PROC_INIT pass (extract init attributes).

14. Executing PROC_ARST pass (detect async resets in processes).

15. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

16. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ALU_7bit.$proc$/foss/designs/ALU/ALU_7bit.v:13$1'.
     1/1: $1\result[6:0]
Creating decoders for process `\ALU_SHR_7bit.$proc$/foss/designs/ALU/ALU_SHR_7bit.v:6$3'.
     1/1: $1\out[6:0]

17. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ALU_7bit.\result' from process `\ALU_7bit.$proc$/foss/designs/ALU/ALU_7bit.v:13$1'.
No latch inferred for signal `\ALU_SHR_7bit.\out' from process `\ALU_SHR_7bit.$proc$/foss/designs/ALU/ALU_SHR_7bit.v:6$3'.

18. Executing PROC_DFF pass (convert process syncs to FFs).

19. Executing PROC_MEMWR pass (convert process memory writes to cells).

20. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\ALU_7bit.$proc$/foss/designs/ALU/ALU_7bit.v:13$1'.
Removing empty process `ALU_7bit.$proc$/foss/designs/ALU/ALU_7bit.v:13$1'.
Found and cleaned up 1 empty switch in `\ALU_SHR_7bit.$proc$/foss/designs/ALU/ALU_SHR_7bit.v:6$3'.
Removing empty process `ALU_SHR_7bit.$proc$/foss/designs/ALU/ALU_SHR_7bit.v:6$3'.
Cleaned up 2 empty switches.

21. Executing CHECK pass (checking for obvious problems).
Checking module ALU_7bit...
Checking module ALU_SHR_7bit...
Checking module ALU_NOT_7bit...
Found and reported 0 problems.

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.
<suppressed ~2 debug messages>
Optimizing module ALU_SHR_7bit.
<suppressed ~1 debug messages>
Optimizing module ALU_NOT_7bit.

23. Executing FLATTEN pass (flatten design).
Deleting now unused module ALU_SHR_7bit.
Deleting now unused module ALU_NOT_7bit.
<suppressed ~2 debug messages>

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.

25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

26. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.

27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_7bit'.
Removed a total of 0 cells.

28. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU_7bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

29. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU_7bit.
Performed a total of 0 changes.

30. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_7bit'.
Removed a total of 0 cells.

31. Executing OPT_DFF pass (perform DFF optimizations).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..

33. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.

34. Executing FSM pass (extract and optimize FSM).

34.1. Executing FSM_DETECT pass (finding FSMs in design).

34.2. Executing FSM_EXTRACT pass (extracting FSM from design).

34.3. Executing FSM_OPT pass (simple optimizations of FSMs).

34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..

34.5. Executing FSM_OPT pass (simple optimizations of FSMs).

34.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

34.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

34.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

35. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.

36. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_7bit'.
Removed a total of 0 cells.

37. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU_7bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

38. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU_7bit.
Performed a total of 0 changes.

39. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_7bit'.
Removed a total of 0 cells.

40. Executing OPT_DFF pass (perform DFF optimizations).

41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..

42. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.

43. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell ALU_7bit.$flatten\SHR1.$procmux$15_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell ALU_7bit.$flatten\SHR1.$procmux$14_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell ALU_7bit.$flatten\SHR1.$procmux$13_CMP0 ($eq).

44. Executing PEEPOPT pass (run peephole optimizers).

45. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..

46. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ALU_7bit:
  created 0 $alu and 0 $macc cells.

47. Executing SHARE pass (SAT-based resource sharing).

48. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.

49. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_7bit'.
Removed a total of 0 cells.

50. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU_7bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

51. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU_7bit.
Performed a total of 0 changes.

52. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_7bit'.
Removed a total of 0 cells.

53. Executing OPT_DFF pass (perform DFF optimizations).

54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..

55. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.

56. Executing MEMORY pass.

56.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

56.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

56.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

56.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

56.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

56.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..

56.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

56.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

56.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..

56.10. Executing MEMORY_COLLECT pass (generating $mem cells).

57. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..

58. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.
<suppressed ~2 debug messages>

59. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_7bit'.
Removed a total of 0 cells.

60. Executing OPT_DFF pass (perform DFF optimizations).

61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

62. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

63. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.

64. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_7bit'.
Removed a total of 0 cells.

65. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU_7bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

66. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU_7bit.
Performed a total of 0 changes.

67. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_7bit'.
Removed a total of 0 cells.

68. Executing OPT_SHARE pass.

69. Executing OPT_DFF pass (perform DFF optimizations).

70. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..

71. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.

72. Executing TECHMAP pass (map to technology primitives).

72.1. Executing Verilog-2005 frontend: /foss/tools/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/foss/tools/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

72.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$a9f023b7f9387cc24984a8fa4722169e6d5f74aa\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~115 debug messages>

73. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.
<suppressed ~76 debug messages>

74. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_7bit'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

75. Executing OPT_DFF pass (perform DFF optimizations).

76. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..
Removed 0 unused cells and 73 unused wires.
<suppressed ~1 debug messages>

77. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.

78. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_7bit'.
Removed a total of 0 cells.

79. Executing OPT_DFF pass (perform DFF optimizations).

80. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..

81. Executing ABC pass (technology mapping using ABC).

81.1. Extracting gate netlist of module `\ALU_7bit' to `<abc-temp-dir>/input.blif'..
Extracted 91 gates and 103 wires to a netlist network with 11 inputs and 8 outputs.

81.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

81.1.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       28
ABC RESULTS:               MUX cells:       13
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        9
ABC RESULTS:                OR cells:       24
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:        internal signals:       84
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        8
Removing temp directory.

82. Executing OPT pass (performing simple optimizations).

82.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.
<suppressed ~7 debug messages>

82.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_7bit'.
Removed a total of 0 cells.

82.3. Executing OPT_DFF pass (perform DFF optimizations).

82.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..
Removed 1 unused cells and 54 unused wires.
<suppressed ~6 debug messages>

82.5. Finished fast OPT passes.

83. Executing HIERARCHY pass (managing design hierarchy).

83.1. Analyzing design hierarchy..
Top module:  \ALU_7bit

83.2. Analyzing design hierarchy..
Top module:  \ALU_7bit
Removed 0 unused modules.

84. Executing CHECK pass (checking for obvious problems).
Checking module ALU_7bit...
Found and reported 0 problems.

85. Printing statistics.

=== ALU_7bit ===

   Number of wires:                 80
   Number of wire bits:            112
   Number of public wires:           8
   Number of public wire bits:      40
   Number of ports:                  5
   Number of port bits:             23
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                      28
     $_MUX_                         13
     $_NAND_                         2
     $_NOR_                          1
     $_NOT_                          8
     $_ORNOT_                        4
     $_OR_                          24
     $scopeinfo                      2

86. Generating Graphviz representation of design.
Writing dot description to `/foss/designs/ALU/runs/RUN_2025-06-08_17-25-06/06-yosys-synthesis/primitive_techmap.dot'.
Dumping module ALU_7bit to page 1.

87. Executing OPT pass (performing simple optimizations).

87.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.

87.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_7bit'.
Removed a total of 0 cells.

87.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU_7bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

87.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU_7bit.
Performed a total of 0 changes.

87.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_7bit'.
Removed a total of 0 cells.

87.6. Executing OPT_DFF pass (perform DFF optimizations).

87.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..

87.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_7bit.

87.9. Finished OPT passes. (There is nothing left to do.)

88. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..
Removed 2 unused cells and 3 unused wires.
<suppressed ~5 debug messages>
{
   "creator": "Yosys 0.53 (git sha1 53c22ab7c, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)",
   "invocation": "stat -json -liberty /foss/designs/ALU/runs/RUN_2025-06-08_17-25-06/tmp/4d8c2230a3e74e15b880894ca6cd70da.lib ",
   "modules": {
      "\\ALU_7bit": {
         "num_wires":         77,
         "num_wire_bits":     95,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 23,
         "num_ports":         5,
         "num_port_bits":     23,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         80,
         "num_cells_by_type": {
            "$_ANDNOT_": 28,
            "$_MUX_": 13,
            "$_NAND_": 2,
            "$_NOR_": 1,
            "$_NOT_": 8,
            "$_ORNOT_": 4,
            "$_OR_": 24
         }
      }
   },
      "design": {
         "num_wires":         77,
         "num_wire_bits":     95,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 23,
         "num_ports":         5,
         "num_port_bits":     23,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         80,
         "num_cells_by_type": {
            "$_ANDNOT_": 28,
            "$_MUX_": 13,
            "$_NAND_": 2,
            "$_NOR_": 1,
            "$_NOT_": 8,
            "$_ORNOT_": 4,
            "$_OR_": 24
         }
      }
}

89. Printing statistics.

=== ALU_7bit ===

   Number of wires:                 77
   Number of wire bits:             95
   Number of public wires:           5
   Number of public wire bits:      23
   Number of ports:                  5
   Number of port bits:             23
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 80
     $_ANDNOT_                      28
     $_MUX_                         13
     $_NAND_                         2
     $_NOR_                          1
     $_NOT_                          8
     $_ORNOT_                        4
     $_OR_                          24

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!

[INFO] Applying tri-state buffer mapping from '/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'â€¦

90. Executing TECHMAP pass (map to technology primitives).

90.1. Executing Verilog-2005 frontend: /foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

90.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

91. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â€¦

92. Executing TECHMAP pass (map to technology primitives).

92.1. Executing Verilog-2005 frontend: /foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

92.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

93. Executing SIMPLEMAP pass (map simple cells to gate primitives).

94. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFE_NN_
    unmapped dff cell: $_DFFE_NP_
    unmapped dff cell: $_DFFE_PN_
    unmapped dff cell: $_DFFE_PP_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

94.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\ALU_7bit':
{
   "creator": "Yosys 0.53 (git sha1 53c22ab7c, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)",
   "invocation": "stat -json -liberty /foss/designs/ALU/runs/RUN_2025-06-08_17-25-06/tmp/4d8c2230a3e74e15b880894ca6cd70da.lib ",
   "modules": {
      "\\ALU_7bit": {
         "num_wires":         77,
         "num_wire_bits":     95,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 23,
         "num_ports":         5,
         "num_port_bits":     23,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         80,
         "num_cells_by_type": {
            "$_ANDNOT_": 28,
            "$_MUX_": 13,
            "$_NAND_": 2,
            "$_NOR_": 1,
            "$_NOT_": 8,
            "$_ORNOT_": 4,
            "$_OR_": 24
         }
      }
   },
      "design": {
         "num_wires":         77,
         "num_wire_bits":     95,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 23,
         "num_ports":         5,
         "num_port_bits":     23,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         80,
         "num_cells_by_type": {
            "$_ANDNOT_": 28,
            "$_MUX_": 13,
            "$_NAND_": 2,
            "$_NOR_": 1,
            "$_NOT_": 8,
            "$_ORNOT_": 4,
            "$_OR_": 24
         }
      }
}

95. Printing statistics.

=== ALU_7bit ===

   Number of wires:                 77
   Number of wire bits:             95
   Number of public wires:           5
   Number of public wire bits:      23
   Number of ports:                  5
   Number of port bits:             23
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 80
     $_ANDNOT_                      28
     $_MUX_                         13
     $_NAND_                         2
     $_NOR_                          1
     $_NOT_                          8
     $_ORNOT_                        4
     $_OR_                          24

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!

[INFO] Using generated ABC script '/foss/designs/ALU/runs/RUN_2025-06-08_17-25-06/06-yosys-synthesis/DELAY_4.abc'â€¦

96. Executing ABC pass (technology mapping using ABC).

96.1. Extracting gate netlist of module `\ALU_7bit' to `/tmp/yosys-abc-U32rAE/input.blif'..
Extracted 80 gates and 91 wires to a netlist network with 11 inputs and 8 outputs.

96.1.1. Executing ABC.
Running ABC command: "/foss/tools/yosys/bin/yosys-abc" -s -f /tmp/yosys-abc-U32rAE/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-U32rAE/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-U32rAE/input.blif 
ABC: + read_lib -w /foss/designs/ALU/runs/RUN_2025-06-08_17-25-06/tmp/4d8c2230a3e74e15b880894ca6cd70da.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/foss/designs/ALU/runs/RUN_2025-06-08_17-25-06/tmp/4d8c2230a3e74e15b880894ca6cd70da.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.07 sec
ABC: Memory =    9.54 MB. Time =     0.07 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /foss/designs/ALU/runs/RUN_2025-06-08_17-25-06/06-yosys-synthesis/synthesis.abc.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + source /foss/designs/ALU/runs/RUN_2025-06-08_17-25-06/06-yosys-synthesis/DELAY_4.abc 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "Small"  Gates =     46 ( 13.0 %)   Cap = 11.9 ff (  6.8 %)   Area =      536.76 ( 84.8 %)   Delay =  2126.01 ps  ( 15.2 %)               
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =     46 ( 13.0 %)   Cap = 11.6 ff ( 10.3 %)   Area =      462.94 ( 69.6 %)   Delay =  1689.31 ps  ( 15.2 %)               
ABC: Path  0 --       4 : 0   12 pi                        A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =  30.7 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      50 : 6    1 sky130_fd_sc_hd__mux4_2   A =  22.52  Df = 473.1 -158.6 ps  S =  86.8 ps  Cin =  2.6 ff  Cout =   4.5 ff  Cmax = 301.2 ff  G =  166  
ABC: Path  2 --      51 : 4    2 sky130_fd_sc_hd__a2bb2o_4 A =  20.02  Df = 737.3 -239.4 ps  S = 122.8 ps  Cin =  4.6 ff  Cout =  35.9 ff  Cmax = 502.6 ff  G =  776  
ABC: Path  3 --      64 : 4    1 sky130_fd_sc_hd__or4_4    A =  11.26  Df =1285.5 -616.3 ps  S =  91.5 ps  Cin =  2.4 ff  Cout =   9.3 ff  Cmax = 534.7 ff  G =  357  
ABC: Path  4 --      65 : 4    1 sky130_fd_sc_hd__nor4_4   A =  21.27  Df =1689.3 -887.6 ps  S = 535.7 ps  Cin =  8.5 ff  Cout =  33.4 ff  Cmax = 112.6 ff  G =  392  
ABC: Start-point = pi3 (\B [0]).  End-point = po7 (\ZF).
ABC: netlist                       : i/o =   11/    8  lat =    0  nd =    46  edge =    140  area =462.95  delay = 5.00  lev = 5
ABC: + write_blif /tmp/yosys-abc-U32rAE/output.blif 

96.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_4 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor4_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o211a_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21a_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4_4 cells:        1
ABC RESULTS:        internal signals:       72
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        8
Removing temp directory.

97. Executing SETUNDEF pass (replace undef values with defined constants).

98. Executing HILOMAP pass (mapping to constant drivers).

99. Executing SPLITNETS pass (splitting up multi-bit signals).

100. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_7bit..
Removed 0 unused cells and 91 unused wires.
<suppressed ~1 debug messages>

101. Executing INSBUF pass (insert buffer cells for connected wires).

102. Executing CHECK pass (checking for obvious problems).
Checking module ALU_7bit...
Found and reported 0 problems.
{
   "creator": "Yosys 0.53 (git sha1 53c22ab7c, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)",
   "invocation": "stat -json -liberty /foss/designs/ALU/runs/RUN_2025-06-08_17-25-06/tmp/4d8c2230a3e74e15b880894ca6cd70da.lib ",
   "modules": {
      "\\ALU_7bit": {
         "num_wires":         43,
         "num_wire_bits":     61,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 23,
         "num_ports":         5,
         "num_port_bits":     23,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         46,
         "area":              462.944000,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211o_2": 3,
            "sky130_fd_sc_hd__a21o_2": 1,
            "sky130_fd_sc_hd__a21oi_2": 1,
            "sky130_fd_sc_hd__a2bb2o_4": 2,
            "sky130_fd_sc_hd__a311o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 2,
            "sky130_fd_sc_hd__and2_2": 2,
            "sky130_fd_sc_hd__and2b_2": 4,
            "sky130_fd_sc_hd__and4b_2": 1,
            "sky130_fd_sc_hd__inv_2": 6,
            "sky130_fd_sc_hd__mux2_2": 5,
            "sky130_fd_sc_hd__mux4_2": 1,
            "sky130_fd_sc_hd__nor2_2": 2,
            "sky130_fd_sc_hd__nor4_4": 1,
            "sky130_fd_sc_hd__o2111a_2": 1,
            "sky130_fd_sc_hd__o211a_2": 3,
            "sky130_fd_sc_hd__o211a_4": 1,
            "sky130_fd_sc_hd__o21a_2": 2,
            "sky130_fd_sc_hd__o21a_4": 1,
            "sky130_fd_sc_hd__o22a_2": 1,
            "sky130_fd_sc_hd__or3_2": 1,
            "sky130_fd_sc_hd__or3_4": 1,
            "sky130_fd_sc_hd__or3b_2": 2,
            "sky130_fd_sc_hd__or4_4": 1
         }
      }
   },
      "design": {
         "num_wires":         43,
         "num_wire_bits":     61,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 23,
         "num_ports":         5,
         "num_port_bits":     23,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         46,
         "area":              462.944000,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211o_2": 3,
            "sky130_fd_sc_hd__a21o_2": 1,
            "sky130_fd_sc_hd__a21oi_2": 1,
            "sky130_fd_sc_hd__a2bb2o_4": 2,
            "sky130_fd_sc_hd__a311o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 2,
            "sky130_fd_sc_hd__and2_2": 2,
            "sky130_fd_sc_hd__and2b_2": 4,
            "sky130_fd_sc_hd__and4b_2": 1,
            "sky130_fd_sc_hd__inv_2": 6,
            "sky130_fd_sc_hd__mux2_2": 5,
            "sky130_fd_sc_hd__mux4_2": 1,
            "sky130_fd_sc_hd__nor2_2": 2,
            "sky130_fd_sc_hd__nor4_4": 1,
            "sky130_fd_sc_hd__o2111a_2": 1,
            "sky130_fd_sc_hd__o211a_2": 3,
            "sky130_fd_sc_hd__o211a_4": 1,
            "sky130_fd_sc_hd__o21a_2": 2,
            "sky130_fd_sc_hd__o21a_4": 1,
            "sky130_fd_sc_hd__o22a_2": 1,
            "sky130_fd_sc_hd__or3_2": 1,
            "sky130_fd_sc_hd__or3_4": 1,
            "sky130_fd_sc_hd__or3b_2": 2,
            "sky130_fd_sc_hd__or4_4": 1
         }
      }
}

103. Printing statistics.

=== ALU_7bit ===

   Number of wires:                 43
   Number of wire bits:             61
   Number of public wires:           5
   Number of public wire bits:      23
   Number of ports:                  5
   Number of port bits:             23
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 46
     sky130_fd_sc_hd__a211o_2        3
     sky130_fd_sc_hd__a21o_2         1
     sky130_fd_sc_hd__a21oi_2        1
     sky130_fd_sc_hd__a2bb2o_4       2
     sky130_fd_sc_hd__a311o_2        1
     sky130_fd_sc_hd__a31o_2         2
     sky130_fd_sc_hd__and2_2         2
     sky130_fd_sc_hd__and2b_2        4
     sky130_fd_sc_hd__and4b_2        1
     sky130_fd_sc_hd__inv_2          6
     sky130_fd_sc_hd__mux2_2         5
     sky130_fd_sc_hd__mux4_2         1
     sky130_fd_sc_hd__nor2_2         2
     sky130_fd_sc_hd__nor4_4         1
     sky130_fd_sc_hd__o2111a_2       1
     sky130_fd_sc_hd__o211a_2        3
     sky130_fd_sc_hd__o211a_4        1
     sky130_fd_sc_hd__o21a_2         2
     sky130_fd_sc_hd__o21a_4         1
     sky130_fd_sc_hd__o22a_2         1
     sky130_fd_sc_hd__or3_2          1
     sky130_fd_sc_hd__or3_4          1
     sky130_fd_sc_hd__or3b_2         2
     sky130_fd_sc_hd__or4_4          1

   Chip area for module '\ALU_7bit': 462.944000
     of which used for sequential elements: 0.000000 (0.00%)

104. Executing Verilog backend.
Dumping module `\ALU_7bit'.

105. Executing JSON backend.
