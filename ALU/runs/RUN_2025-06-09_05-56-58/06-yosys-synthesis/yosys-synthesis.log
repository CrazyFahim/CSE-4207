
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.53 (git sha1 53c22ab7c, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)

1. Executing Liberty frontend: /foss/pdks/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.
[INFO] Using SDC file '/foss/designs/ALU/runs/RUN_2025-06-09_05-56-58/06-yosys-synthesis/synthesis.abc.sdc' for ABCâ€¦

2. Executing Verilog-2005 frontend: /foss/designs/ALU/top.v
Parsing SystemVerilog input from `/foss/designs/ALU/top.v' to AST representation.
Storing AST representation for module `$abstract\top'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /foss/designs/ALU/controller.v
Parsing SystemVerilog input from `/foss/designs/ALU/controller.v' to AST representation.
Storing AST representation for module `$abstract\controller'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /foss/designs/ALU/ALU_7bit.v
Parsing SystemVerilog input from `/foss/designs/ALU/ALU_7bit.v' to AST representation.
Storing AST representation for module `$abstract\ALU_7bit'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /foss/designs/ALU/ALU_SHR_7bit.v
Parsing SystemVerilog input from `/foss/designs/ALU/ALU_SHR_7bit.v' to AST representation.
Storing AST representation for module `$abstract\ALU_SHR_7bit'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /foss/designs/ALU/ALU_NOT_7bit.v
Parsing SystemVerilog input from `/foss/designs/ALU/ALU_NOT_7bit.v' to AST representation.
Storing AST representation for module `$abstract\ALU_NOT_7bit'.
Successfully finished Verilog frontend.

7. Executing HIERARCHY pass (managing design hierarchy).

8. Executing AST frontend in derive mode using pre-parsed AST for module `\top'.
Generating RTLIL representation for module `\top'.

8.1. Analyzing design hierarchy..
Top module:  \top

8.2. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU_7bit'.
Generating RTLIL representation for module `\ALU_7bit'.

8.3. Executing AST frontend in derive mode using pre-parsed AST for module `\controller'.
Generating RTLIL representation for module `\controller'.

8.4. Analyzing design hierarchy..
Top module:  \top
Used module:     \ALU_7bit
Used module:     \controller

8.5. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU_SHR_7bit'.
Generating RTLIL representation for module `\ALU_SHR_7bit'.

8.6. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU_NOT_7bit'.
Generating RTLIL representation for module `\ALU_NOT_7bit'.

8.7. Analyzing design hierarchy..
Top module:  \top
Used module:     \ALU_7bit
Used module:         \ALU_SHR_7bit
Used module:         \ALU_NOT_7bit
Used module:     \controller

8.8. Analyzing design hierarchy..
Top module:  \top
Used module:     \ALU_7bit
Used module:         \ALU_SHR_7bit
Used module:         \ALU_NOT_7bit
Used module:     \controller
Removing unused module `$abstract\ALU_NOT_7bit'.
Removing unused module `$abstract\ALU_SHR_7bit'.
Removing unused module `$abstract\ALU_7bit'.
Removing unused module `$abstract\controller'.
Removing unused module `$abstract\top'.
Removed 5 unused modules.
Renaming module top to top.

9. Generating Graphviz representation of design.
Writing dot description to `/foss/designs/ALU/runs/RUN_2025-06-09_05-56-58/06-yosys-synthesis/hierarchy.dot'.
Dumping module top to page 1.

10. Executing TRIBUF pass.

11. Executing HIERARCHY pass (managing design hierarchy).

11.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \ALU_7bit
Used module:         \ALU_SHR_7bit
Used module:         \ALU_NOT_7bit
Used module:     \controller

11.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \ALU_7bit
Used module:         \ALU_SHR_7bit
Used module:         \ALU_NOT_7bit
Used module:     \controller
Removed 0 unused modules.

12. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

13. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/foss/designs/ALU/ALU_SHR_7bit.v:6$6 in module ALU_SHR_7bit.
Marked 1 switch rules as full_case in process $proc$/foss/designs/ALU/ALU_SHR_7bit.v:6$6 in module ALU_SHR_7bit.
Marked 1 switch rules as full_case in process $proc$/foss/designs/ALU/controller.v:21$5 in module controller.
Marked 1 switch rules as full_case in process $proc$/foss/designs/ALU/controller.v:15$4 in module controller.
Removed 1 dead cases from process $proc$/foss/designs/ALU/ALU_7bit.v:13$2 in module ALU_7bit.
Marked 1 switch rules as full_case in process $proc$/foss/designs/ALU/ALU_7bit.v:13$2 in module ALU_7bit.
Removed a total of 2 dead cases.

14. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 6 assignments to connections.

15. Executing PROC_INIT pass (extract init attributes).

16. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\controller.$proc$/foss/designs/ALU/controller.v:15$4'.

17. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~3 debug messages>

18. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ALU_SHR_7bit.$proc$/foss/designs/ALU/ALU_SHR_7bit.v:6$6'.
     1/1: $1\out[6:0]
Creating decoders for process `\controller.$proc$/foss/designs/ALU/controller.v:21$5'.
     1/4: $1\nstate[2:0]
     2/4: $1\OP[0:0]
     3/4: $1\B[6:0]
     4/4: $1\A[6:0]
Creating decoders for process `\controller.$proc$/foss/designs/ALU/controller.v:15$4'.
     1/1: $0\pstate[2:0]
Creating decoders for process `\ALU_7bit.$proc$/foss/designs/ALU/ALU_7bit.v:13$2'.
     1/1: $1\result[6:0]

19. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ALU_SHR_7bit.\out' from process `\ALU_SHR_7bit.$proc$/foss/designs/ALU/ALU_SHR_7bit.v:6$6'.
No latch inferred for signal `\controller.\A' from process `\controller.$proc$/foss/designs/ALU/controller.v:21$5'.
No latch inferred for signal `\controller.\B' from process `\controller.$proc$/foss/designs/ALU/controller.v:21$5'.
No latch inferred for signal `\controller.\OP' from process `\controller.$proc$/foss/designs/ALU/controller.v:21$5'.
No latch inferred for signal `\controller.\nstate' from process `\controller.$proc$/foss/designs/ALU/controller.v:21$5'.
No latch inferred for signal `\ALU_7bit.\result' from process `\ALU_7bit.$proc$/foss/designs/ALU/ALU_7bit.v:13$2'.

20. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\controller.\pstate' using process `\controller.$proc$/foss/designs/ALU/controller.v:15$4'.
  created $adff cell `$procdff$45' with positive edge clock and positive level reset.

21. Executing PROC_MEMWR pass (convert process memory writes to cells).

22. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\ALU_SHR_7bit.$proc$/foss/designs/ALU/ALU_SHR_7bit.v:6$6'.
Removing empty process `ALU_SHR_7bit.$proc$/foss/designs/ALU/ALU_SHR_7bit.v:6$6'.
Found and cleaned up 1 empty switch in `\controller.$proc$/foss/designs/ALU/controller.v:21$5'.
Removing empty process `controller.$proc$/foss/designs/ALU/controller.v:21$5'.
Removing empty process `controller.$proc$/foss/designs/ALU/controller.v:15$4'.
Found and cleaned up 1 empty switch in `\ALU_7bit.$proc$/foss/designs/ALU/ALU_7bit.v:13$2'.
Removing empty process `ALU_7bit.$proc$/foss/designs/ALU/ALU_7bit.v:13$2'.
Cleaned up 3 empty switches.

23. Executing CHECK pass (checking for obvious problems).
Checking module top...
Checking module ALU_SHR_7bit...
Checking module controller...
Checking module ALU_7bit...
Checking module ALU_NOT_7bit...
Found and reported 0 problems.

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>
Optimizing module ALU_SHR_7bit.
<suppressed ~1 debug messages>
Optimizing module controller.
<suppressed ~2 debug messages>
Optimizing module ALU_7bit.
<suppressed ~2 debug messages>
Optimizing module ALU_NOT_7bit.

25. Executing FLATTEN pass (flatten design).
Deleting now unused module ALU_SHR_7bit.
Deleting now unused module controller.
Deleting now unused module ALU_7bit.
Deleting now unused module ALU_NOT_7bit.
<suppressed ~4 debug messages>

26. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 24 unused wires.
<suppressed ~2 debug messages>

28. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

30. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

31. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $flatten\fsm.$procmux$26: $auto$opt_reduce.cc:137:opt_pmux$51
  Optimizing cells in module \top.
Performed a total of 1 changes.

32. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

33. Executing OPT_DFF pass (perform DFF optimizations).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 9 unused wires.
<suppressed ~3 debug messages>

35. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

36. Rerunning OPT passes. (Maybe there is more to doâ€¦)

37. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

38. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

39. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

40. Executing OPT_DFF pass (perform DFF optimizations).

41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

42. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

43. Executing FSM pass (extract and optimize FSM).

43.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.fsm.pstate as FSM state register:
    Circuit seems to be self-resetting.

43.2. Executing FSM_EXTRACT pass (extracting FSM from design).

43.3. Executing FSM_OPT pass (simple optimizations of FSMs).

43.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

43.5. Executing FSM_OPT pass (simple optimizations of FSMs).

43.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

43.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

43.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

44. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

46. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

47. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

48. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

49. Executing OPT_DFF pass (perform DFF optimizations).

50. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

51. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

52. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 7) from mux cell top.$flatten\fsm.$procmux$31 ($pmux).
Removed top 2 bits (of 3) from port B of cell top.$flatten\fsm.$procmux$22_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\fsm.$procmux$21_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\fsm.$procmux$20_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\datapath.\SHR1.$procmux$13_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\datapath.\SHR1.$procmux$14_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$flatten\datapath.\SHR1.$procmux$15_CMP0 ($eq).

53. Executing PEEPOPT pass (run peephole optimizers).

54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

55. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

56. Executing SHARE pass (SAT-based resource sharing).

57. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

58. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

59. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

60. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

61. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

62. Executing OPT_DFF pass (perform DFF optimizations).

63. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

64. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

65. Executing MEMORY pass.

65.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

65.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

65.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

65.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

65.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

65.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

65.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

65.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

65.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

65.10. Executing MEMORY_COLLECT pass (generating $mem cells).

66. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

67. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~3 debug messages>

68. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

69. Executing OPT_DFF pass (perform DFF optimizations).

70. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 2 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

71. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

72. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

73. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

74. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

75. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $pmux cell $flatten\fsm.$procmux$31:
      Old ports: A=3'000, B=6'001111, Y=\datapath.SHR1.shift
      New ports: A=2'00, B=4'0111, Y=\datapath.SHR1.shift [1:0]
      New connections: \datapath.SHR1.shift [2] = \datapath.SHR1.shift [1]
    Consolidated identical input bits for $pmux cell $flatten\fsm.$procmux$36:
      Old ports: A=7'0000000, B=21'101010111001100000001, Y=\datapath.NOT1.A
      New ports: A=4'0000, B=12'110101100001, Y={ \datapath.NOT1.A [4] \datapath.NOT1.A [2:0] }
      New connections: { \datapath.NOT1.A [6:5] \datapath.NOT1.A [3] } = { \datapath.NOT1.A [2:1] 1'0 }
  Optimizing cells in module \top.
Performed a total of 2 changes.

76. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

77. Executing OPT_SHARE pass.

78. Executing OPT_DFF pass (perform DFF optimizations).

79. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

80. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~13 debug messages>

81. Rerunning OPT passes. (Maybe there is more to doâ€¦)

82. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 3/8 on $pmux $flatten\datapath.\SHR1.$procmux$8.
    dead port 4/8 on $pmux $flatten\datapath.\SHR1.$procmux$8.
    dead port 5/8 on $pmux $flatten\datapath.\SHR1.$procmux$8.
    dead port 6/8 on $pmux $flatten\datapath.\SHR1.$procmux$8.
Removed 4 multiplexer ports.
<suppressed ~4 debug messages>

83. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $pmux cell $flatten\datapath.\SHR1.$procmux$8:
      Old ports: A={ \datapath.NOT1.A [6:4] 1'0 \datapath.NOT1.A [6:5] \datapath.NOT1.A [0] }, B={ 1'0 \datapath.NOT1.A [6:4] 1'0 \datapath.NOT1.A [6:5] 6'000000 \datapath.NOT1.A [6] 7'0000000 }, Y=\datapath.R_SHR
      New ports: A={ \datapath.NOT1.A [4] 1'0 \datapath.NOT1.A [6:5] \datapath.NOT1.A [0] }, B={ \datapath.NOT1.A [5:4] 1'0 \datapath.NOT1.A [6:5] 4'0000 \datapath.NOT1.A [6] 5'00000 }, Y=\datapath.R_SHR [4:0]
      New connections: \datapath.R_SHR [6:5] = \datapath.R_SHR [2:1]
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $flatten\datapath.$procmux$40:
      Old ports: A=\datapath.R_NOT, B=\datapath.R_SHR, Y=\alu_result
      New ports: A={ $auto$opt_expr.cc:205:group_cell_inputs$52 [1] 1'1 $auto$opt_expr.cc:205:group_cell_inputs$52 [3:2] $auto$opt_expr.cc:205:group_cell_inputs$52 [0] }, B=\datapath.R_SHR [4:0], Y=\alu_result [4:0]
      New connections: \alu_result [6:5] = \alu_result [2:1]
  Optimizing cells in module \top.
Performed a total of 2 changes.

84. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

85. Executing OPT_SHARE pass.

86. Executing OPT_DFF pass (perform DFF optimizations).

87. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

88. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

89. Rerunning OPT passes. (Maybe there is more to doâ€¦)

90. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

91. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

92. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

93. Executing OPT_SHARE pass.

94. Executing OPT_DFF pass (perform DFF optimizations).

95. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

96. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

97. Executing TECHMAP pass (map to technology primitives).

97.1. Executing Verilog-2005 frontend: /foss/tools/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/foss/tools/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

97.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$c2e415ef15bc3ccd2723772353a6b450d3d76206\_90_pmux for cells of type $pmux.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using template $paramod$fedb90247e1daaa8b0af86a595f377181f141d27\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~177 debug messages>

98. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~76 debug messages>

99. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

100. Executing OPT_DFF pass (perform DFF optimizations).

101. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 119 unused wires.
<suppressed ~1 debug messages>

102. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

103. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

104. Executing OPT_DFF pass (perform DFF optimizations).

105. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

106. Executing ABC pass (technology mapping using ABC).

106.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 65 gates and 70 wires to a netlist network with 3 inputs and 9 outputs.

106.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

106.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       13
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:       11
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:        internal signals:       58
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        9
Removing temp directory.

107. Executing OPT pass (performing simple optimizations).

107.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

107.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

107.3. Executing OPT_DFF pass (perform DFF optimizations).

107.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 46 unused wires.
<suppressed ~4 debug messages>

107.5. Finished fast OPT passes.

108. Executing HIERARCHY pass (managing design hierarchy).

108.1. Analyzing design hierarchy..
Top module:  \top

108.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

109. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

110. Printing statistics.

=== top ===

   Number of wires:                 48
   Number of wire bits:            144
   Number of public wires:          23
   Number of public wire bits:     119
   Number of ports:                  4
   Number of port bits:             10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 40
     $_ANDNOT_                      12
     $_AND_                          1
     $_DFF_PP0_                      3
     $_MUX_                          1
     $_NAND_                         2
     $_NOR_                          1
     $_NOT_                          1
     $_ORNOT_                        6
     $_OR_                           9
     $scopeinfo                      4

111. Generating Graphviz representation of design.
Writing dot description to `/foss/designs/ALU/runs/RUN_2025-06-09_05-56-58/06-yosys-synthesis/primitive_techmap.dot'.
Dumping module top to page 1.

112. Executing OPT pass (performing simple optimizations).

112.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

112.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

112.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

112.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

112.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

112.6. Executing OPT_DFF pass (perform DFF optimizations).

112.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

112.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

112.9. Finished OPT passes. (There is nothing left to do.)

113. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 17 unused wires.
<suppressed ~21 debug messages>
{
   "creator": "Yosys 0.53 (git sha1 53c22ab7c, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)",
   "invocation": "stat -json -liberty /foss/designs/ALU/runs/RUN_2025-06-09_05-56-58/tmp/e91bcb5da95540af8898069d3bd473d4.lib ",
   "modules": {
      "\\top": {
         "num_wires":         31,
         "num_wire_bits":     41,
         "num_pub_wires":     6,
         "num_pub_wire_bits": 16,
         "num_ports":         4,
         "num_port_bits":     10,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         36,
         "num_cells_by_type": {
            "$_ANDNOT_": 12,
            "$_AND_": 1,
            "$_DFF_PP0_": 3,
            "$_MUX_": 1,
            "$_NAND_": 2,
            "$_NOR_": 1,
            "$_NOT_": 1,
            "$_ORNOT_": 6,
            "$_OR_": 9
         }
      }
   },
      "design": {
         "num_wires":         31,
         "num_wire_bits":     41,
         "num_pub_wires":     6,
         "num_pub_wire_bits": 16,
         "num_ports":         4,
         "num_port_bits":     10,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         36,
         "num_cells_by_type": {
            "$_ANDNOT_": 12,
            "$_AND_": 1,
            "$_DFF_PP0_": 3,
            "$_MUX_": 1,
            "$_NAND_": 2,
            "$_NOR_": 1,
            "$_NOT_": 1,
            "$_ORNOT_": 6,
            "$_OR_": 9
         }
      }
}

114. Printing statistics.

=== top ===

   Number of wires:                 31
   Number of wire bits:             41
   Number of public wires:           6
   Number of public wire bits:      16
   Number of ports:                  4
   Number of port bits:             10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $_ANDNOT_                      12
     $_AND_                          1
     $_DFF_PP0_                      3
     $_MUX_                          1
     $_NAND_                         2
     $_NOR_                          1
     $_NOT_                          1
     $_ORNOT_                        6
     $_OR_                           9

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!
   Area for cell type $_DFF_PP0_ is unknown!

[INFO] Applying tri-state buffer mapping from '/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'â€¦

115. Executing TECHMAP pass (map to technology primitives).

115.1. Executing Verilog-2005 frontend: /foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

115.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

116. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â€¦

117. Executing TECHMAP pass (map to technology primitives).

117.1. Executing Verilog-2005 frontend: /foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

117.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

118. Executing SIMPLEMAP pass (map simple cells to gate primitives).

119. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFE_NN_
    unmapped dff cell: $_DFFE_NP_
    unmapped dff cell: $_DFFE_PN_
    unmapped dff cell: $_DFFE_PP_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

119.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\top':
  mapped 3 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
{
   "creator": "Yosys 0.53 (git sha1 53c22ab7c, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)",
   "invocation": "stat -json -liberty /foss/designs/ALU/runs/RUN_2025-06-09_05-56-58/tmp/e91bcb5da95540af8898069d3bd473d4.lib ",
   "modules": {
      "\\top": {
         "num_wires":         34,
         "num_wire_bits":     44,
         "num_pub_wires":     6,
         "num_pub_wire_bits": 16,
         "num_ports":         4,
         "num_port_bits":     10,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         39,
         "area":              78.825600,
         "num_cells_by_type": {
            "$_ANDNOT_": 12,
            "$_AND_": 1,
            "$_MUX_": 1,
            "$_NAND_": 2,
            "$_NOR_": 1,
            "$_NOT_": 4,
            "$_ORNOT_": 6,
            "$_OR_": 9,
            "sky130_fd_sc_hd__dfrtp_2": 3
         }
      }
   },
      "design": {
         "num_wires":         34,
         "num_wire_bits":     44,
         "num_pub_wires":     6,
         "num_pub_wire_bits": 16,
         "num_ports":         4,
         "num_port_bits":     10,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         39,
         "area":              78.825600,
         "num_cells_by_type": {
            "$_ANDNOT_": 12,
            "$_AND_": 1,
            "$_MUX_": 1,
            "$_NAND_": 2,
            "$_NOR_": 1,
            "$_NOT_": 4,
            "$_ORNOT_": 6,
            "$_OR_": 9,
            "sky130_fd_sc_hd__dfrtp_2": 3
         }
      }
}

120. Printing statistics.

=== top ===

   Number of wires:                 34
   Number of wire bits:             44
   Number of public wires:           6
   Number of public wire bits:      16
   Number of ports:                  4
   Number of port bits:             10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 39
     $_ANDNOT_                      12
     $_AND_                          1
     $_MUX_                          1
     $_NAND_                         2
     $_NOR_                          1
     $_NOT_                          4
     $_ORNOT_                        6
     $_OR_                           9
     sky130_fd_sc_hd__dfrtp_2        3

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!

   Chip area for module '\top': 78.825600
     of which used for sequential elements: 78.825600 (100.00%)

[INFO] Using generated ABC script '/foss/designs/ALU/runs/RUN_2025-06-09_05-56-58/06-yosys-synthesis/DELAY_4.abc'â€¦

121. Executing ABC pass (technology mapping using ABC).

121.1. Extracting gate netlist of module `\top' to `/tmp/yosys-abc-Qnnm1v/input.blif'..
Extracted 36 gates and 40 wires to a netlist network with 4 inputs and 11 outputs.

121.1.1. Executing ABC.
Running ABC command: "/foss/tools/yosys/bin/yosys-abc" -s -f /tmp/yosys-abc-Qnnm1v/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-Qnnm1v/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-Qnnm1v/input.blif 
ABC: + read_lib -w /foss/designs/ALU/runs/RUN_2025-06-09_05-56-58/tmp/e91bcb5da95540af8898069d3bd473d4.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/foss/designs/ALU/runs/RUN_2025-06-09_05-56-58/tmp/e91bcb5da95540af8898069d3bd473d4.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.06 sec
ABC: Memory =    9.54 MB. Time =     0.06 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /foss/designs/ALU/runs/RUN_2025-06-09_05-56-58/06-yosys-synthesis/synthesis.abc.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + source /foss/designs/ALU/runs/RUN_2025-06-09_05-56-58/06-yosys-synthesis/DELAY_4.abc 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "Small"  Gates =     17 ( 47.1 %)   Cap = 23.2 ff ( 19.9 %)   Area =      157.65 ( 52.9 %)   Delay =   848.76 ps  ( 23.5 %)               
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =     17 ( 47.1 %)   Cap = 22.6 ff ( 20.6 %)   Area =      128.87 ( 41.2 %)   Delay =   612.41 ps  ( 23.5 %)               
ABC: Path  0 --       3 : 0    6 pi                        A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =  16.5 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      17 : 2    1 sky130_fd_sc_hd__nand2b_4 A =  13.76  Df = 115.0  -22.3 ps  S =  41.3 ps  Cin =  5.6 ff  Cout =   4.9 ff  Cmax = 521.9 ff  G =   82  
ABC: Path  2 --      18 : 1    3 sky130_fd_sc_hd__buf_6    A =  11.26  Df = 251.6  -25.9 ps  S =  91.0 ps  Cin =  4.6 ff  Cout =  40.7 ff  Cmax = 785.5 ff  G =  871  
ABC: Path  3 --      19 : 2    1 sky130_fd_sc_hd__or2_4    A =   8.76  Df = 475.4 -130.1 ps  S =  46.7 ps  Cin =  2.4 ff  Cout =   4.9 ff  Cmax = 514.5 ff  G =  193  
ABC: Path  4 --      20 : 1    1 sky130_fd_sc_hd__buf_6    A =  11.26  Df = 612.4 -147.3 ps  S =  77.4 ps  Cin =  4.6 ff  Cout =  33.4 ff  Cmax = 785.5 ff  G =  723  
ABC: Start-point = pi2 (\fsm.pstate [2]).  End-point = po0 (\flag_gt_zero).
ABC: netlist                       : i/o =    4/   11  lat =    0  nd =    17  edge =     27  area =128.87  delay = 4.00  lev = 4
ABC: + write_blif /tmp/yosys-abc-Qnnm1v/output.blif 

121.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__buf_6 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand2b_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        1
ABC RESULTS:        internal signals:       25
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:       11
Removing temp directory.

122. Executing SETUNDEF pass (replace undef values with defined constants).

123. Executing HILOMAP pass (mapping to constant drivers).

124. Executing SPLITNETS pass (splitting up multi-bit signals).

125. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 40 unused wires.
<suppressed ~1 debug messages>

126. Executing INSBUF pass (insert buffer cells for connected wires).
Add top/$auto$insbuf.cc:97:execute$470: \flag_gt_zero -> \result [1]
Add top/$auto$insbuf.cc:97:execute$471: \result [6] -> \result [2]
Add top/$auto$insbuf.cc:97:execute$472: \flag_gt_zero -> \result [5]

127. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.
{
   "creator": "Yosys 0.53 (git sha1 53c22ab7c, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)",
   "invocation": "stat -json -liberty /foss/designs/ALU/runs/RUN_2025-06-09_05-56-58/tmp/e91bcb5da95540af8898069d3bd473d4.lib ",
   "modules": {
      "\\top": {
         "num_wires":         19,
         "num_wire_bits":     25,
         "num_pub_wires":     10,
         "num_pub_wire_bits": 16,
         "num_ports":         4,
         "num_port_bits":     10,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         23,
         "area":              222.713600,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__buf_1": 2,
            "sky130_fd_sc_hd__buf_2": 3,
            "sky130_fd_sc_hd__buf_6": 2,
            "sky130_fd_sc_hd__dfrtp_2": 3,
            "sky130_fd_sc_hd__inv_2": 4,
            "sky130_fd_sc_hd__nand2b_4": 1,
            "sky130_fd_sc_hd__nor2_2": 3,
            "sky130_fd_sc_hd__o21bai_2": 1,
            "sky130_fd_sc_hd__or2_2": 1,
            "sky130_fd_sc_hd__or2_4": 1,
            "sky130_fd_sc_hd__or2b_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 1
         }
      }
   },
      "design": {
         "num_wires":         19,
         "num_wire_bits":     25,
         "num_pub_wires":     10,
         "num_pub_wire_bits": 16,
         "num_ports":         4,
         "num_port_bits":     10,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         23,
         "area":              222.713600,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__buf_1": 2,
            "sky130_fd_sc_hd__buf_2": 3,
            "sky130_fd_sc_hd__buf_6": 2,
            "sky130_fd_sc_hd__dfrtp_2": 3,
            "sky130_fd_sc_hd__inv_2": 4,
            "sky130_fd_sc_hd__nand2b_4": 1,
            "sky130_fd_sc_hd__nor2_2": 3,
            "sky130_fd_sc_hd__o21bai_2": 1,
            "sky130_fd_sc_hd__or2_2": 1,
            "sky130_fd_sc_hd__or2_4": 1,
            "sky130_fd_sc_hd__or2b_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 1
         }
      }
}

128. Printing statistics.

=== top ===

   Number of wires:                 19
   Number of wire bits:             25
   Number of public wires:          10
   Number of public wire bits:      16
   Number of ports:                  4
   Number of port bits:             10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 23
     sky130_fd_sc_hd__buf_1          2
     sky130_fd_sc_hd__buf_2          3
     sky130_fd_sc_hd__buf_6          2
     sky130_fd_sc_hd__dfrtp_2        3
     sky130_fd_sc_hd__inv_2          4
     sky130_fd_sc_hd__nand2b_4       1
     sky130_fd_sc_hd__nor2_2         3
     sky130_fd_sc_hd__o21bai_2       1
     sky130_fd_sc_hd__or2_2          1
     sky130_fd_sc_hd__or2_4          1
     sky130_fd_sc_hd__or2b_2         1
     sky130_fd_sc_hd__xnor2_2        1

   Chip area for module '\top': 222.713600
     of which used for sequential elements: 78.825600 (35.39%)

129. Executing Verilog backend.
Dumping module `\top'.

130. Executing JSON backend.
